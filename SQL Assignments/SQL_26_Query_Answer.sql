#Schema Created

show databases;
use mydb;
select database();

create table salesman(
	salesman_id int primary key,
    name varchar(25),
    city varchar(15),
    commission float
);
drop table salesman;
desc salesman;

create table orders(
	ord_no int primary key,
    purch_amt float,
    ord_date date,
    customer_id int,
    salesman_id int,
    foreign key (salesman_id) references salesman(salesman_id),
    foreign key (customer_id) references customer(customer_id)
);
drop table orders;
desc orders;

create table customer(
	customer_id int primary key,
    cust_name varchar(25),
    city varchar(15),
    grade int,
    salesman_id int,
    foreign key (salesman_id) references salesman (salesman_id)
);

desc customer;
###################################################################

# Insert the records

insert into salesman values
(5001 ,'James Hoog',  'New York' ,   0.15),
(5002 ,'Nail Knite', 'Paris ',0.13),
(5005 , 'Pit Alex',  'London', 0.11),
(5006 ,'Mc Lyon' ,'Paris', 0.14),
(5003 , 'Lauson Hen' , 'San Jose' ,0.12),
(5007 ,'Paul Adam','Rome' , 0.13);

select * from salesman;

insert into customer values
(3002         ,'Nick Rimando'  ,'New York    ',100,         5001),
(3005         ,'Graham Zusi '  ,'California  ',200,         5002),
(3001         ,'Brad Guzan  '  ,'London      ',100,         5005),
(3004         ,'Fabian Johns'  ,'Paris       ',300,         5006),
(3007         ,'Brad Davis  '  ,'New York    ',200,         5001),
(3009         ,'Geoff Camero'  ,'Berlin      ',100,         5003),
(3008         ,'Julian Green'  ,'London      ',300,         5002),
(3003         ,'Jozy Altidor'  ,'Moncow      ',200,         5007);
drop table customer;
select * from customer;

insert into orders values
(70001      , 150.5     ,  '2012-10-05' , 3005     ,    5002),
(70009      , 270.65    ,  '2012-09-10' , 3001     ,    5005),
(70002      , 65.26     , ' 2012-10-05' , 3002     ,    5001),
(70004      , 110.5     ,  '2012-08-17' , 3009     ,    5003),
(70007      , 948.5     ,  '2012-09-10' , 3005     ,    5002);

select * from orders;

#######################################################################

/* 1. write a SQL query to find all the orders issued by the salesman 'Paul Adam'.
   Return ord_no, purch_amt, ord_date, customer_id and salesman_id. */
   
select * from orders where salesman_id = (select salesman_id from salesman where name = 'Paul Adam');

########################################################################

/* 2. write a SQL query to find all orders generated by London-based salespeople.
   Return ord_no, purch_amt, ord_date, customer_id, salesman_id. */
   
select * from orders where salesman_id = (select salesman_id from salesman where city = 'London');

#######################################################################

/*3. write a SQL query to find all orders generated by the salespeople who may work
   for customers whose id is 3007.Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
*/

select * from orders where salesman_id = (select salesman_id from customer where customer_id = 3007);

#######################################################################

/* 4. write a SQL query to find the order values greater than the average order value
   of 10th October 2012.Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
*/

select * from orders where purch_amt> (select avg(purch_amt) from orders where ord_date = '2012-10-10' );

#####################################################################

/* 5. write a SQL query to find all the orders generated in New York city.
   Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
*/

select * from orders where salesman_id in (select salesman_id from salesman where city = 'New York');
###################################################################

/* 6. write a SQL query to determine the commission of the salespeople in Paris. Return commission.*/

select commission from salesman where city = 'Paris';
select * from salesman where city = 'Paris';
select * from salesman;
update salesman set city = 'Paris' where salesman_id = 5002;

######################################################################

/* 7. Write a query to display all the customers whose ID is 2001 below the salesperson ID of Mc Lyon. */

select * from customer where customer_id < (select salesman_id-2001 from salesman where name = 'Mc Lyon');

#####################################################################

/* 8. write a SQL query to count the number of customers with grades above the average in New York City.
   Return grade and count. */
   
select grade,count(*) as 'no_of_customers' from customer where trim(city) ='New York' and grade > 
(select avg(grade) from customer where trim(city) = 'New York') group by grade;

######################################################################
/* 9. write a SQL query to find those salespeople who earned the maximum commission.
    Return ord_no, purch_amt, ord_date, and salesman_id. */

select * from orders where salesman_id in (select salesman_id from salesman where commission = (select max(commission) from salesman ));

########################################################################

/* 10. From the following tables write SQL query to find the customers who placed orders on 17th August 2012.
    Return ord_no, purch_amt, ord_date, customer_id, salesman_id and cust_name.  */
    
select o.ord_no, o.purch_amt, o.ord_date, o.customer_id, o.salesman_id ,c.cust_name from orders as o join customer as c 
on c.customer_id = o.customer_id where o.ord_date = '2012-08-17' ;

#########################################################################

/*11. write a SQL query to find salespeople who had more than one customer. Return salesman_id and name.
*/

select s.salesman_id,s.name from salesman as s join customer as c on s.salesman_id = c.salesman_id group by s.salesman_id,s.name
having count(c.customer_id)>1;
##########################################################################

/* 12. write a SQL query to find those orders, which are higher than the average amount of the orders.
   Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
*/

select * from orders where purch_amt > (select avg(purch_amt) from orders);

########################################################################

/* 13. From the following tables write a SQL query to find those orders that are equal or higher than the
    average amount of the orders. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
*/
select * from orders where purch_amt >= (select avg(purch_amt) from orders);

#########################################################################

/* 14. Write a query to find the sums of the amounts from the orders table, grouped by date, and eliminate all dates
     where the sum was not at least 1000.00 above the maximum order amount for that date.
*/

select ord_date,sum(purch_amt) from orders group by ord_date having sum(purch_amt)>=
(select max(o.purch_amt) from orders as o where o.ord_date = orders.ord_date)+ 1000;

########################################################################
 
/* 15.Write a query to extract all data from the customer table if and only if one or more of the customers in the customer table
  are located in London. */
  select * from customer where 'London' in (select trim(city) from customer);
  
  ########################################################################
  
/* 16. write a SQL query to find salespeople who deal with multiple customers.
   Return salesman_id, name, city and commission.*/
select s.salesman_id, s.name, s.city, s.commission
from salesman s
join customer c on s.salesman_id = c.salesman_id
group by s.salesman_id, s.name, s.city, s.commission
having count(c.customer_id) > 1;

####################################################################################

/* 17. Write a SQL query to find salespeople who deal with a single customer.
    Return salesman_id, name, city and commission. */
    
select s.salesman_id, s.name, s.city, s.commission
from salesman s
join customer c on s.salesman_id = c.salesman_id
group by s.salesman_id, s.name, s.city, s.commission
having count(c.customer_id) = 1;

#############################################################################
/* 18.  Write a SQL query to find the salespeople who deal the customers with more than one order.
    Return salesman_id, name, city and commission.
*/

select s.salesman_id, s.name, s.city,s.commission from salesman s join customer c on s.salesman_id = c.salesman_id 
where c.customer_id in (select customer_id from orders group by customer_id having count(ord_no)>1);

#########################################################################################

/* 19. write a SQL query to find the salespeople who deal with those customers who live in the same city.
    Return salesman_id, name, city and commission.
*/
select distinct s.salesman_id, s.name, s.city,s.commission from salesman s join customer c on s.salesman_id = c.salesman_id 
where trim(s.city) = trim(c.city);

######################################################################################

/* 20. From the following tables write a SQL query to find salespeople whose place of residence matches
    any city where customers live.Return salesman_id, name, city and commission.
*/
select * from salesman where trim(city) in (select distinct trim(city) from customer);

######################################################################################
/* 21. write a SQL query to find all those salespeople whose names appear alphabetically lower than the customerâ€™s name.
    Return salesman_id, name, city, commission. */
		
select distinct s.* from salesman as s join customer as c on s.salesman_id = c.salesman_id where s.name<c.cust_name;
    
#####################################################################################
/* 22. write a SQL query to find all those customers with a higher grade than all the customers
    alphabetically below the city of New York. Return customer_id, cust_name, city, grade, salesman_id.
*/
select customer_id, cust_name, city, grade, salesman_id from customer where grade > all (select grade
from customer where trim(city) > 'New York');

####################################################################################

/* 23. write a SQL query to find all those orders whose order amount exceeds at least one of the
    orders placed on September 10th 2012. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
*/
select ord_no, purch_amt, ord_date, customer_id, salesman_id from orders where purch_amt > any (
select purch_amt from orders where ord_date = '2012-09-10' );

#####################################################################################

/* 24. write a SQL query to find orders where the order amount is less than the order amount
    of a customer residing in London City. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
*/
select ord_no, purch_amt, ord_date, customer_id, salesman_id from orders where purch_amt < any (
select o2.purch_amt from orders o2 join customer c on o2.customer_id = c.customer_id where trim(c.city) = 'London');

######################################################################################
/* 25. write a SQL query to find those orders where every order amount is less than the maximum
  order amount of a customer who lives in London City. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
*/ 
select ord_no, purch_amt, ord_date, customer_id, salesman_id from orders where purch_amt < (
select max(o2.purch_amt) from orders o2 join customer c on o2.customer_id = c.customer_id where trim(c.city) = 'London');

######################################################################################

/* 26. From the following tables write a SQL query to find those customers whose grades are higher than those living in New York City.
    Return customer_id, cust_name, city, grade and salesman_id.
*/

select customer_id, cust_name, city, grade, salesman_id from customer where grade > all (
select grade from customer where trim(city) = 'New York');

