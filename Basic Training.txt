1. flowchart
2. Algorithm
3. UML
4. git
5. Python programming (Important for Data engineering)

About python
1. Open source
2. Easy to learn compared to other lang
3. Application created using core python
4. Web application using python (flask,django framework) - full stack
	flask is used for light application
	django is hevay/difficult
5. Testing using Python
6. Automation using python
7. Data science : Supervised & unsupervised learning
8. Data engineering - pull data from different sources , transformation & load in a location called ETL
			Informatica - on premises
			Snowflake - but work on cloude
			place into storage place - transformation - sql,pyspark,python

			
9. spark : Execution framework to process huge amount of data [Tera/Hexa/penta databytes]
10. pyspark : python api for spark
11. spark is written using scala

1. Pyspark used to pull big data from spark which is connected to big data server
2. java
3. scala
4. R
5. SQL

more than 3000 packages - library

SQL and python : 80% job is over (Every developer should know and strong in this)

============================================================================================================

1. Flowcahrt

	Describe process using flow of symbols  	
	Oval - start/stop
	Parallelogram - read/write
	rectangle - processing
	diamond - condition 

====================================================================
2. Algorithm

step1 : start
Step2 : read two values a,b
step3 : print c
step 4 : end
===================================================================

Programming: 

1. online python compiler

data type:
	int
	float
	string
	bool
We have 200 questions from PCAP Certification from udemy

---------------------------------------------------------------------------------------------------------------------
Afternoon Session

1. Conditional Statements
	if statement
	eval statement
 	a = eval(input("Enter a input"))
        print(type(a)) so this eval identify the datatype whatever input it takes

2. File Handling Sample program



f= open("stud.txt","w")
for i in range(3):
    name = input("Enter the name\t")
    M = input("Enter Mark\t")
    f.write(name+" "+M)
    f.write("\n")
f.close()

f1 = open("stud.txt","r")


# n,m = f1.read().split(" ")
# m1 = int(m)
# if(m1>=50):
#     check = "Pass"
# else:
#     check = "Fail"
# print("Name","\t","Mark","\t","Pass/Fail")
# print(n,"\t",m,"\t",check)

print("\n")
print("Name","\t","Mark","\t","Pass/Fail")
for i in f1:
    n,m = i.split(" ")
    m = int(m)
    if(m>=50):
        check = "Pass"
    else:
        check = "Fail"
    
    print(n,"\t",m,"\t",check)
    
============================================================    
List:

1. ALl elements must be enclised in []
2. elements can be hetrogenous. Each element is of different datatype
3. elements are ordered by its index
4. elements can be accessed from left to right like 0,1,2 etc
5. elements can be aceessed from right to left like -1,-2,-3
6. elements can be modified [ Mutable]


==========================================================

slicing
nmae= "Bosch Hyderabad"
x[start:end:increment]

=================================================================

Program to find the frequency of letters in a string

from Collections import Counter
a = "doss"
print(Counter(a))

It will print the frequency of the letters

===============================================================

Lambda function

fruits = ["apple","orange"]
xfruits = filter(lamda x : if x==5, fruits)
print(xfruits)

==============================================================
Function and Method

Function can be used independently
whereas method is also a function but it is used only with objects
like s.display() here s is object of a class


===============================================================
1. builtin function
2. user defined function
	it consume memory whether that part of defined function is executed or not
3. lamda function
	light function
	anonymous functin
	no return statement
	it will only consume memory when it executes
==============================================================

Git Testing

C:\Users\XED1COB\Documents\Python with data Engineering Internship>git config --global user.name
Sedhulingam

C:\Users\XED1COB\Documents\Python with data Engineering Internship>git config --global user.email
sedhulingam123@gmail.com

C:\Users\XED1COB\Documents\Python with data Engineering Internship>git config --list --show-origin
file:C:/Program Files/Git/etc/gitconfig diff.astextplain.textconv=astextplain
file:C:/Program Files/Git/etc/gitconfig filter.lfs.clean=git-lfs clean -- %f
file:C:/Program Files/Git/etc/gitconfig filter.lfs.smudge=git-lfs smudge -- %f
file:C:/Program Files/Git/etc/gitconfig filter.lfs.process=git-lfs filter-process
file:C:/Program Files/Git/etc/gitconfig filter.lfs.required=true
file:C:/Program Files/Git/etc/gitconfig http.sslbackend=schannel
file:C:/Program Files/Git/etc/gitconfig core.autocrlf=true
file:C:/Program Files/Git/etc/gitconfig core.fscache=true
file:C:/Program Files/Git/etc/gitconfig core.symlinks=false
file:C:/Program Files/Git/etc/gitconfig pull.rebase=false
file:C:/Program Files/Git/etc/gitconfig credential.helper=manager
file:C:/Program Files/Git/etc/gitconfig credential.https://dev.azure.com.usehttppath=true
file:C:/Program Files/Git/etc/gitconfig init.defaultbranch=master
file:C:/Users/XED1COB/.gitconfig        user.name=Sedhulingam
file:C:/Users/XED1COB/.gitconfig        user.email=sedhulingam123@gmail.com
file:.git/config        core.repositoryformatversion=0
file:.git/config        core.filemode=false
file:.git/config        core.bare=false
file:.git/config        core.logallrefupdates=true
file:.git/config        core.symlinks=false
file:.git/config        core.ignorecase=true

C:\Users\XED1COB\Documents\Python with data Engineering Internship>git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        Basic Training.txt
        Git Commands.txt
        Task1.py

nothing added to commit but untracked files present (use "git add" to track)

C:\Users\XED1COB\Documents\Python with data Engineering Internship>cat "Basic Training.txt"
'cat' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\XED1COB\Documents\Python with data Engineering Internship>touch "Basic Training.txt"
'touch' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\XED1COB\Documents\Python with data Engineering Internship>notepad "Basic Training.txt"

C:\Users\XED1COB\Documents\Python with data Engineering Internship>git add --all

C:\Users\XED1COB\Documents\Python with data Engineering Internship>git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   Basic Training.txt
        new file:   Git Commands.txt
        new file:   Task1.py


C:\Users\XED1COB\Documents\Python with data Engineering Internship>git commit -m "Testing Purpose"
[master (root-commit) a01d966] Testing Purpose
 3 files changed, 214 insertions(+)
 create mode 100644 Basic Training.txt
 create mode 100644 Git Commands.txt
 create mode 100644 Task1.py

C:\Users\XED1COB\Documents\Python with data Engineering Internship>git status
On branch master
nothing to commit, working tree clean

C:\Users\XED1COB\Documents\Python with data Engineering Internship>git branch list

C:\Users\XED1COB\Documents\Python with data Engineering Internship>git branch --list
  list
* master

C:\Users\XED1COB\Documents\Python with data Engineering Internship>git checkout -b first-branch
Switched to a new branch 'first-branch'

C:\Users\XED1COB\Documents\Python with data Engineering Internship>git branch --list
* first-branch
  list
  master

C:\Users\XED1COB\Documents\Python with data Engineering Internship>git branch -d list
Deleted branch list (was a01d966).

C:\Users\XED1COB\Documents\Python with data Engineering Internship>git status
On branch first-branch
nothing to commit, working tree clean

C:\Users\XED1COB\Documents\Python with data Engineering Internship>git branch --list
* first-branch
  master

C:\Users\XED1COB\Documents\Python with data Engineering Internship>


============================================================================================
28/8/25 (Video available in Day3 Screen Presso)

1. Iterator: object iterates over the elements(list,tuple,seq,dic)
	it has both __iter--() and __next__() #control of the iterator we using this 
2. Generator : manual creation of iterator and it uses yield to return and has seperate function 
3. Closure function: the function object gets inner function addresss and then the arguments passed will be used for inner function 

4. Access modifier
Private = Has two underscores on attributes and methods
Protected = Has one underscore on attributes an methods
Public = has none 

5. Packages and Modules
 Module - Any python program with extension .py called module 
	Module contains methods,classes and variables

 Package - It is a collection of related modules from math import sqrt
library - It is a colection of related function eg: #include <math.h>

===========================================================================================
1.9.25

1. Tree : Binary tree

		1
	2		3 
4	5	6

2. Graphs
3. Hash
 hash table, hash map, hash set

===============================================================
3.9.25

Work on Udemy questions Python

1. def func(a, *args, **kwargs):    print(a, args, kwargs) func(2, 1, 5, x=4, y=3)   # print 2 (1, 5) {'x': 4, 'y': 3}

==========================================================================================

| Technique           | Task                        | Main Idea                               | Strengths                                     |
| ------------------- | --------------------------- | --------------------------------------- | --------------------------------------------- |
| Linear Regression   | Regression                  | Fit a line                              | Simple, interpretable                         |
| Logistic Regression | Classification              | Probabilistic binary classifier         | Fast, works well with linearly separable data |
| Decision Trees      | Classification & Regression | Tree-based splits                       | Easy to interpret                             |
| Random Forest       | Classification & Regression | Ensemble of trees                       | Accurate, less overfitting                    |
| SVM                 | Classification              | Maximize margin between classes         | Effective in high-dimensional spaces          |
| k-NN                | Classification & Regression | Predict from neighbors                  | Simple, no training phase                     |
| Naive Bayes         | Classification              | Probabilistic with feature independence | Fast, works well for text data                |
| Gradient Boosting   | Classification & Regression | Sequential learning of trees            | High accuracy, flexible 
                      |
=================================================================================================

9.9.25
1. Linear Regression 
2. Synergy - combine two results to improve the results efficiency

